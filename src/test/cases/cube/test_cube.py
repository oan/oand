#!/usr/bin/env python
'''
Test cases for oan.cube

'''

__author__ = "martin.palmer.develop@gmail.com"
__copyright__ = "Copyright 2011, Amivono AB"
__maintainer__ = "martin.palmer.develop@gmail.com"
__license__ = "We pwn it all."
__version__ = "0.1"
__status__ = "Test"

from test.test_case import OANTestCase
from oan.util import log


'''
# * Alla noder skickar sin node lista till sina 3 kompisar varje timme.
#   Pa det sattet sa far du reda pa om nagon node ar dad, och en slot har blivit
#   ledig.
# * Nar en ny slot ska tilldelas sa tas i farsta hand en slot som ar helt tom,
#   och i andra hand en slot som ar "dad" och i tredje hand pa annan niva.
# * Alla nya slottar valjs ifran lagsta x,y,z kordinat.
# * Alla nya slottar valjs ifran den y,z list som har lagst antal nodes.
# * Om tva noder har samma slot, far den som har lagst uuid behalla slotten.
# * Valj ut tre noder per x/y/z list att kommunicera med.
'''
class Connetions:
    all = {}


class Message:
    origin_url = None


class MessageConnect(Message):
    def execute(self, node):
        for x_pos in xrange(0, len(node.x_list)):
            c_list = node.x_list[x_pos]

            if len(c_list) < 4:
                c_list.append(self.origin_url)

                msg = MessageGiveSlotid((x_pos, 0, 0))
                node.send(self.origin_url, msg)
                return

        last_node = c_list.pop()
        node.x_list.append([last_node, self.origin_url])

        msg = MessageGiveSlotid((len(node.x_list)-1, 0, 0))
        node.send(self.origin_url, msg)
        node.send(last_node, msg)


class MessageGiveSlotid(Message):
    slot_id = None

    def __init__(self, slot_id):
        self.slot_id = slot_id

    def execute(self, node):
        node.slot_id = self.slot_id


class MessageSnapshot(Message):
    url = None

    def __init__(self, url):
        self.url = url

    def execute(self, node):
        if self.url == "oan://node-list/all":
            msg = MessageResource((node.x_list, node.y_list, node.z_list))
            node.send(self.origin_url, msg)


class MessageResource():
    resource_list = None

    def __init__(self, resource_list):
        self.resource_list = resource_list

    def execute(self, node):
        x, y, z = self.resource_list
        node.x_list = x[:]
        node.y_list = y[:]
        node.z_list = z[:]


class MessageGetSlotNode(): pass

class MessagePing(): pass
class MessageHeartbeat(): pass
class MessageGetValue(): pass
class MessageSetValue(): pass


class Node():
    bind_url = None
    slot_id = None
    x_list = None
    y_list = None
    z_list = None

    def __init__(self, bind_url):
        self.bind_url = bind_url
        self.slot_id = (0, 0, 0)
        self.x_list = [[bind_url]]
        self.y_list = [[bind_url]]
        self.z_list = [[bind_url]]
        Connetions.all[bind_url] = self

    def send(self, url, message):
        message.origin_url = self.bind_url
        Connetions.all[url].receive(message)

    def push(self, message):
        for node in self.c_list.values():
            self.send(node, message)

    def receive(self, message):
        message.execute(self)


class TestOANCube(OANTestCase):
    database = None

    def setUp(self):
        pass

    def connect_node(self, node_id, slot_id, test_list):
        new_node = Node(node_id)
        new_node.send('001', MessageConnect())
        new_node.send('001', MessageSnapshot("oan://node-list/all"))
        self.assertEqual(new_node.slot_id, slot_id)
        self.assertEqual(new_node.x_list, self.get_x_list(slot_id, test_list))
        #self.assertEqual(new_node.y_list, self.get_y_list(test_list))

    def get_x_list(self, slot_id, test_list):
        x, y, z = slot_id

        new_x_list = []
        for c_list in test_list[y*3:3]:
            new_c_list = []
            for node in c_list:
                if node != "___":
                    new_c_list.append(str(node))
            if len(new_c_list):
                new_x_list.append(new_c_list)
        log.info(new_x_list)
        return new_x_list

    def test_connection(self):
        first_node = Node('001')
        self.assertEqual(first_node.slot_id, (0, 0, 0))


        self.connect_node("002", (0, 0, 0), [["001", "002", "___", "___"], ["___", "___", "___", "___"], ["___", "___", "___", "___"],
                                             ["___", "___", "___", "___"], ["___", "___", "___", "___"], ["___", "___", "___", "___"],
                                             ["___", "___", "___", "___"], ["___", "___", "___", "___"], ["___", "___", "___", "___"]])

        self.connect_node("003", (0, 0, 0), [["001", "002", "003", "___"], ["___", "___", "___", "___"], ["___", "___", "___", "___"],
                                             ["___", "___", "___", "___"], ["___", "___", "___", "___"], ["___", "___", "___", "___"],
                                             ["___", "___", "___", "___"], ["___", "___", "___", "___"], ["___", "___", "___", "___"]])

        self.connect_node("004", (0, 0, 0), [["001", "002", "003", "004"], ["___", "___", "___", "___"], ["___", "___", "___", "___"],
                                             ["___", "___", "___", "___"], ["___", "___", "___", "___"], ["___", "___", "___", "___"],
                                             ["___", "___", "___", "___"], ["___", "___", "___", "___"], ["___", "___", "___", "___"]])

        self.connect_node("005", (1, 0, 0), [["001", "002", "003", "___"], ["004", "005", "___", "___"], ["___", "___", "___", "___"],
                                             ["___", "___", "___", "___"], ["___", "___", "___", "___"], ["___", "___", "___", "___"],
                                             ["___", "___", "___", "___"], ["___", "___", "___", "___"], ["___", "___", "___", "___"]])

        self.connect_node("006", (0, 0, 0), [["001", "002", "003", "006"], ["004", "005", "___", "___"], ["___", "___", "___", "___"],
                                             ["___", "___", "___", "___"], ["___", "___", "___", "___"], ["___", "___", "___", "___"],
                                             ["___", "___", "___", "___"], ["___", "___", "___", "___"], ["___", "___", "___", "___"]])

        self.connect_node("007", (1, 0, 0), [["001", "002", "003", "006"], ["004", "005", "007", "___"], ["___", "___", "___", "___"],
                                             ["___", "___", "___", "___"], ["___", "___", "___", "___"], ["___", "___", "___", "___"],
                                             ["___", "___", "___", "___"], ["___", "___", "___", "___"], ["___", "___", "___", "___"]])

        self.connect_node("008", (1, 0, 0), [["001", "002", "003", "006"], ["004", "005", "007", "008"], ["___", "___", "___", "___"],
                                             ["___", "___", "___", "___"], ["___", "___", "___", "___"], ["___", "___", "___", "___"],
                                             ["___", "___", "___", "___"], ["___", "___", "___", "___"], ["___", "___", "___", "___"]])

        self.connect_node("009", (2, 0, 0), [["001", "002", "003", "006"], ["004", "005", "007", "___"], ["008", "009", "___", "___"],
                                             ["___", "___", "___", "___"], ["___", "___", "___", "___"], ["___", "___", "___", "___"],
                                             ["___", "___", "___", "___"], ["___", "___", "___", "___"], ["___", "___", "___", "___"]])

        self.connect_node("010", (2, 0, 0), [["001", "002", "003", "006"], ["004", "005", "007", "010"], ["008", "009", "___", "___"],
                                             ["___", "___", "___", "___"], ["___", "___", "___", "___"], ["___", "___", "___", "___"],
                                             ["___", "___", "___", "___"], ["___", "___", "___", "___"], ["___", "___", "___", "___"]])

        self.connect_node("011", (2, 0, 0), [["001", "002", "003", "006"], ["004", "005", "007", "010"], ["008", "009", "011", "___"],
                                             ["___", "___", "___", "___"], ["___", "___", "___", "___"], ["___", "___", "___", "___"],
                                             ["___", "___", "___", "___"], ["___", "___", "___", "___"], ["___", "___", "___", "___"]])

        self.connect_node("012", (2, 0, 0), [["001", "002", "003", "006"], ["004", "005", "007", "010"], ["008", "009", "011", "012"],
                                             ["___", "___", "___", "___"], ["___", "___", "___", "___"], ["___", "___", "___", "___"],
                                             ["___", "___", "___", "___"], ["___", "___", "___", "___"], ["___", "___", "___", "___"]])

        self.connect_node("013", (0, 1, 0), [["001", "002", "003", "006"], ["004", "005", "007", "010"], ["008", "009", "011", "___"],
                                             ["012", "013", "___", "___"], ["___", "___", "___", "___"], ["___", "___", "___", "___"],
                                             ["___", "___", "___", "___"], ["___", "___", "___", "___"], ["___", "___", "___", "___"]])

        self.connect_node("014", (2, 0, 0), [["001", "002", "003", "006"], ["004", "005", "007", "010"], ["008", "009", "011", "014"],
                                             ["012", "013", "___", "___"], ["___", "___", "___", "___"], ["___", "___", "___", "___"],
                                             ["___", "___", "___", "___"], ["___", "___", "___", "___"], ["___", "___", "___", "___"]])

        self.connect_node("015", (0, 1, 0), [["001", "002", "003", "006"], ["004", "005", "007", "010"], ["008", "009", "011", "014"],
                                             ["012", "013", "015", "___"], ["___", "___", "___", "___"], ["___", "___", "___", "___"],
                                             ["___", "___", "___", "___"], ["___", "___", "___", "___"], ["___", "___", "___", "___"]])

        self.connect_node("016", (0, 1, 0), [["001", "002", "003", "006"], ["004", "005", "007", "010"], ["008", "009", "011", "014"],
                                             ["012", "013", "015", "016"], ["___", "___", "___", "___"], ["___", "___", "___", "___"],
                                             ["___", "___", "___", "___"], ["___", "___", "___", "___"], ["___", "___", "___", "___"]])

        self.connect_node("017", (1, 1, 0), [["001", "002", "003", "006"], ["004", "005", "007", "010"], ["008", "009", "011", "014"],
                                             ["012", "013", "015", "___"], ["016", "017", "___", "___"], ["___", "___", "___", "___"],
                                             ["___", "___", "___", "___"], ["___", "___", "___", "___"], ["___", "___", "___", "___"]])

        self.connect_node("018", (0, 1, 0), [["001", "002", "003", "006"], ["004", "005", "007", "010"], ["008", "009", "011", "014"],
                                             ["012", "013", "015", "018"], ["016", "017", "___", "___"], ["___", "___", "___", "___"],
                                             ["___", "___", "___", "___"], ["___", "___", "___", "___"], ["___", "___", "___", "___"]])

        self.connect_node("019", (1, 1, 0), [["001", "002", "003", "006"], ["004", "005", "007", "010"], ["008", "009", "011", "014"],
                                             ["012", "013", "015", "018"], ["016", "017", "019", "___"], ["___", "___", "___", "___"],
                                             ["___", "___", "___", "___"], ["___", "___", "___", "___"], ["___", "___", "___", "___"]])

        self.connect_node("020", (1, 1, 0), [["001", "002", "003", "006"], ["004", "005", "007", "010"], ["008", "009", "011", "014"],
                                             ["012", "013", "015", "018"], ["016", "017", "019", "020"], ["___", "___", "___", "___"],
                                             ["___", "___", "___", "___"], ["___", "___", "___", "___"], ["___", "___", "___", "___"]])

        self.connect_node("021", (2, 1, 0), [["001", "002", "003", "006"], ["004", "005", "007", "010"], ["008", "009", "011", "014"],
                                             ["012", "013", "015", "018"], ["016", "017", "019", "___"], ["020", "021", "___", "___"],
                                             ["___", "___", "___", "___"], ["___", "___", "___", "___"], ["___", "___", "___", "___"]])

        self.connect_node("022", (1, 1, 0), [["001", "002", "003", "006"], ["004", "005", "007", "010"], ["008", "009", "011", "014"],
                                             ["012", "013", "015", "018"], ["016", "017", "019", "022"], ["020", "021", "___", "___"],
                                             ["___", "___", "___", "___"], ["___", "___", "___", "___"], ["___", "___", "___", "___"]])

        self.connect_node("023", (2, 1, 0), [["001", "002", "003", "006"], ["004", "005", "007", "010"], ["008", "009", "011", "014"],
                                             ["012", "013", "015", "018"], ["016", "017", "019", "022"], ["020", "021", "023", "___"],
                                             ["___", "___", "___", "___"], ["___", "___", "___", "___"], ["___", "___", "___", "___"]])

        self.connect_node("024", (2, 1, 0), [["001", "002", "003", "006"], ["004", "005", "007", "010"], ["008", "009", "011", "014"],
                                             ["012", "013", "015", "018"], ["016", "017", "019", "022"], ["020", "021", "023", "024"],
                                             ["___", "___", "___", "___"], ["___", "___", "___", "___"], ["___", "___", "___", "___"]])

        self.connect_node("025", (0, 2, 0), [["001", "002", "003", "006"], ["004", "005", "007", "010"], ["008", "009", "011", "014"],
                                             ["012", "013", "015", "018"], ["016", "017", "019", "022"], ["020", "021", "023", "___"],
                                             ["024", "025", "___", "___"], ["___", "___", "___", "___"], ["___", "___", "___", "___"]])

        self.connect_node("026", (2, 1, 0), [["001", "002", "003", "006"], ["004", "005", "007", "010"], ["008", "009", "011", "014"],
                                             ["012", "013", "015", "018"], ["016", "017", "019", "022"], ["020", "021", "023", "026"],
                                             ["024", "025", "___", "___"], ["___", "___", "___", "___"], ["___", "___", "___", "___"]])

        self.connect_node("027", (0, 2, 0), [["001", "002", "003", "006"], ["004", "005", "007", "010"], ["008", "009", "011", "014"],
                                             ["012", "013", "015", "018"], ["016", "017", "019", "022"], ["020", "021", "023", "026"],
                                             ["024", "025", "027", "___"], ["___", "___", "___", "___"], ["___", "___", "___", "___"]])

        #
        # DEBUG/LOG
        #
        for node in Connetions.all.values():
            log.info("%s %s" % (node.bind_url, node.x_list))

        for node in Connetions.all.values():
            log.info("%s %s" % (node.bind_url, node.slot_id))
