#!/usr/bin/env python
"""
Test cases for oan.cube

"""

__author__ = "martin@amivono.com, daniel@amivono.com"
__copyright__ = "Copyright 2011, Amivono AB"
__maintainer__ = "martin@amivono.com, daniel@amivono.com"
__license__ = "We pwn it all."
__version__ = "0.1"
__status__ = "Test"


from test.test_case import OANTestCase
from oan.util import log
from oan.util import log_counter
from application import OANApplication
from network_view import Connections
from message_connect import MessageConnect
from network_counter import NetworkCounter


class TestOANCube(OANTestCase):
    _apps = None

    def trigger_5minute_cron(self):
        """
        Emulates a cron job that is executed every 5 minute.

        Naturally a unit test don't have any scheduler/cron, so this function
        should be called manually.

        """
        for app in self._apps.values():
            app.trigger_5minute_cron()

    def connect_node(self, url, block_id, test_list):
        log.info("======= %s =======================================================================================" % url)
        log.info("Create %s with block_id %s" % (url, block_id))

        server_bind_url = "{0:03d}".format(int(url) - 1)

        app = OANApplication(url)
        self._apps[url] = app
        app.send(server_bind_url, MessageConnect())

        self.trigger_5minute_cron()

        self.assertEqual(app.block_position.id(), block_id)

        # Assert x
        x_max_size = max(3, self._apps[server_bind_url].cube_view.x.size())

        x_list = self.get_x_list(block_id, test_list, x_max_size)
        self.assertEqual(app.cube_view.x.get_blocks(), x_list)

        # Assert y
        y_list = self.get_y_list(block_id, test_list, x_max_size)
        self.assertEqual(app.cube_view.y.get_blocks(), y_list)

    def get_x_list(self, slot_id, test_list, width):
        x, y, z = slot_id

        new_x_list = []
        for c_list in test_list[y*width:y*width+width]:
            new_c_list = []
            for node in c_list:
                if node == "___":
                    node = None
                else:
                    node = str(node)
                new_c_list.append(node)

            for new_c_list_idx in reversed(xrange(0, len(new_c_list))):
                if new_c_list[new_c_list_idx] == None:
                    del new_c_list[new_c_list_idx]
                else:
                    break

            new_x_list.append(new_c_list)

        for new_x_list_idx in reversed(xrange(0, len(new_x_list))):
            if len(new_x_list[new_x_list_idx]) == 0:
                del new_x_list[new_x_list_idx]
            else:
                break

        log.info('Expected: x(%s) %s' % (slot_id, new_x_list))
        return new_x_list

    def get_y_list(self, slot_id, test_list, width):
        x, y, z = slot_id

        new_y_list = []
        for slot_pos in xrange(x, len(test_list), width):
            c_list = test_list[slot_pos]
            log.info("slot_id %s slot_pos %s %s" % (slot_id, slot_pos, c_list))
            new_c_list = []
            for node in c_list:
                if node == "___":
                    node = None
                else:
                    node = str(node)
                new_c_list.append(node)

            for new_c_list_idx in reversed(xrange(0, len(new_c_list))):
                if new_c_list[new_c_list_idx] == None:
                    del new_c_list[new_c_list_idx]
                else:
                    break

            if len(new_c_list):
                new_y_list.append(new_c_list)

        for new_y_list_idx in reversed(xrange(0, len(new_y_list))):
            if len(new_y_list[new_y_list_idx]) == 0:
                del new_y_list[new_y_list_idx]
            else:
                break

        log.info('Expected: y(%s) %s' % (slot_id, new_y_list))
        return new_y_list

    def test_connection(self):
        log_counter.clear()
        self._apps = {}
        Connections.clear()

        first_app = OANApplication('001')
        self._apps['001'] = first_app
        self.assertEqual(first_app.block_position.id(), (0, 0, 0))


        self.connect_node("002", (0, 0, 0), [["001", "002", "___", "___"], ["___", "___", "___", "___"], ["___", "___", "___", "___"],
                                             ["___", "___", "___", "___"], ["___", "___", "___", "___"], ["___", "___", "___", "___"],
                                             ["___", "___", "___", "___"], ["___", "___", "___", "___"], ["___", "___", "___", "___"]])

        self.connect_node("003", (0, 0, 0), [["001", "002", "003", "___"], ["___", "___", "___", "___"], ["___", "___", "___", "___"],
                                             ["___", "___", "___", "___"], ["___", "___", "___", "___"], ["___", "___", "___", "___"],
                                             ["___", "___", "___", "___"], ["___", "___", "___", "___"], ["___", "___", "___", "___"]])

        self.connect_node("004", (0, 0, 0), [["001", "002", "003", "004"], ["___", "___", "___", "___"], ["___", "___", "___", "___"],
                                             ["___", "___", "___", "___"], ["___", "___", "___", "___"], ["___", "___", "___", "___"],
                                             ["___", "___", "___", "___"], ["___", "___", "___", "___"], ["___", "___", "___", "___"]])

        self.connect_node("005", (1, 0, 0), [["001", "002", "003", "004"], ["005", "___", "___", "___"], ["___", "___", "___", "___"],
                                             ["___", "___", "___", "___"], ["___", "___", "___", "___"], ["___", "___", "___", "___"],
                                             ["___", "___", "___", "___"], ["___", "___", "___", "___"], ["___", "___", "___", "___"]])

        self.connect_node("006", (1, 0, 0), [["001", "002", "003", "004"], ["005", "006", "___", "___"], ["___", "___", "___", "___"],
                                             ["___", "___", "___", "___"], ["___", "___", "___", "___"], ["___", "___", "___", "___"],
                                             ["___", "___", "___", "___"], ["___", "___", "___", "___"], ["___", "___", "___", "___"]])

        self.connect_node("007", (1, 0, 0), [["001", "002", "003", "004"], ["005", "006", "007", "___"], ["___", "___", "___", "___"],
                                             ["___", "___", "___", "___"], ["___", "___", "___", "___"], ["___", "___", "___", "___"],
                                             ["___", "___", "___", "___"], ["___", "___", "___", "___"], ["___", "___", "___", "___"]])

        self.connect_node("008", (1, 0, 0), [["001", "002", "003", "004"], ["005", "006", "007", "008"], ["___", "___", "___", "___"],
                                             ["___", "___", "___", "___"], ["___", "___", "___", "___"], ["___", "___", "___", "___"],
                                             ["___", "___", "___", "___"], ["___", "___", "___", "___"], ["___", "___", "___", "___"]])

        self.connect_node("009", (2, 0, 0), [["001", "002", "003", "004"], ["005", "006", "007", "008"], ["009", "___", "___", "___"],
                                             ["___", "___", "___", "___"], ["___", "___", "___", "___"], ["___", "___", "___", "___"],
                                             ["___", "___", "___", "___"], ["___", "___", "___", "___"], ["___", "___", "___", "___"]])

        self.connect_node("010", (2, 0, 0), [["001", "002", "003", "004"], ["005", "006", "007", "008"], ["009", "010", "___", "___"],
                                             ["___", "___", "___", "___"], ["___", "___", "___", "___"], ["___", "___", "___", "___"],
                                             ["___", "___", "___", "___"], ["___", "___", "___", "___"], ["___", "___", "___", "___"]])

        self.connect_node("011", (2, 0, 0), [["001", "002", "003", "004"], ["005", "006", "007", "008"], ["009", "010", "011", "___"],
                                             ["___", "___", "___", "___"], ["___", "___", "___", "___"], ["___", "___", "___", "___"],
                                             ["___", "___", "___", "___"], ["___", "___", "___", "___"], ["___", "___", "___", "___"]])

        self.connect_node("012", (2, 0, 0), [["001", "002", "003", "004"], ["005", "006", "007", "008"], ["009", "010", "011", "012"],
                                             ["___", "___", "___", "___"], ["___", "___", "___", "___"], ["___", "___", "___", "___"],
                                             ["___", "___", "___", "___"], ["___", "___", "___", "___"], ["___", "___", "___", "___"]])

        self.connect_node("013", (2, 1, 0), [["001", "002", "003", "004"], ["005", "006", "007", "008"], ["009", "010", "011", "012"],
                                             ["___", "___", "___", "___"], ["___", "___", "___", "___"], ["013", "___", "___", "___"],
                                             ["___", "___", "___", "___"], ["___", "___", "___", "___"], ["___", "___", "___", "___"]])

        self.connect_node("014", (2, 1, 0), [["001", "002", "003", "004"], ["005", "006", "007", "008"], ["009", "010", "011", "012"],
                                             ["___", "___", "___", "___"], ["___", "___", "___", "___"], ["013", "014", "___", "___"],
                                             ["___", "___", "___", "___"], ["___", "___", "___", "___"], ["___", "___", "___", "___"]])

        self.connect_node("015", (2, 1, 0), [["001", "002", "003", "004"], ["005", "006", "007", "008"], ["009", "010", "011", "012"],
                                             ["___", "___", "___", "___"], ["___", "___", "___", "___"], ["013", "014", "015", "___"],
                                             ["___", "___", "___", "___"], ["___", "___", "___", "___"], ["___", "___", "___", "___"]])

        self.connect_node("016", (2, 1, 0), [["001", "002", "003", "004"], ["005", "006", "007", "008"], ["009", "010", "011", "012"],
                                             ["___", "___", "___", "___"], ["___", "___", "___", "___"], ["013", "014", "015", "016"],
                                             ["___", "___", "___", "___"], ["___", "___", "___", "___"], ["___", "___", "___", "___"]])

        self.connect_node("017", (0, 1, 0), [["001", "002", "003", "004"], ["005", "006", "007", "008"], ["009", "010", "011", "012"],
                                             ["017", "___", "___", "___"], ["___", "___", "___", "___"], ["013", "014", "015", "016"],
                                             ["___", "___", "___", "___"], ["___", "___", "___", "___"], ["___", "___", "___", "___"]])

        self.connect_node("018", (0, 1, 0), [["001", "002", "003", "004"], ["005", "006", "007", "008"], ["009", "010", "011", "012"],
                                             ["017", "018", "___", "___"], ["___", "___", "___", "___"], ["013", "014", "015", "016"],
                                             ["___", "___", "___", "___"], ["___", "___", "___", "___"], ["___", "___", "___", "___"]])

        self.connect_node("019", (0, 1, 0), [["001", "002", "003", "004"], ["005", "006", "007", "008"], ["009", "010", "011", "012"],
                                             ["017", "018", "019", "___"], ["___", "___", "___", "___"], ["013", "014", "015", "016"],
                                             ["___", "___", "___", "___"], ["___", "___", "___", "___"], ["___", "___", "___", "___"]])

        self.connect_node("020", (0, 1, 0), [["001", "002", "003", "004"], ["005", "006", "007", "008"], ["009", "010", "011", "012"],
                                             ["017", "018", "019", "020"], ["___", "___", "___", "___"], ["013", "014", "015", "016"],
                                             ["___", "___", "___", "___"], ["___", "___", "___", "___"], ["___", "___", "___", "___"]])

        self.connect_node("021", (1, 1, 0), [["001", "002", "003", "004"], ["005", "006", "007", "008"], ["009", "010", "011", "012"],
                                             ["017", "018", "019", "020"], ["021", "___", "___", "___"], ["013", "014", "015", "016"],
                                             ["___", "___", "___", "___"], ["___", "___", "___", "___"], ["___", "___", "___", "___"]])

        self.connect_node("022", (1, 1, 0), [["001", "002", "003", "004"], ["005", "006", "007", "008"], ["009", "010", "011", "012"],
                                             ["017", "018", "019", "020"], ["021", "022", "___", "___"], ["013", "014", "015", "016"],
                                             ["___", "___", "___", "___"], ["___", "___", "___", "___"], ["___", "___", "___", "___"]])

        self.connect_node("023", (1, 1, 0), [["001", "002", "003", "004"], ["005", "006", "007", "008"], ["009", "010", "011", "012"],
                                             ["017", "018", "019", "020"], ["021", "022", "023", "___"], ["013", "014", "015", "016"],
                                             ["___", "___", "___", "___"], ["___", "___", "___", "___"], ["___", "___", "___", "___"]])

        self.connect_node("024", (1, 1, 0), [["001", "002", "003", "004"], ["005", "006", "007", "008"], ["009", "010", "011", "012"],
                                             ["017", "018", "019", "020"], ["021", "022", "023", "024"], ["013", "014", "015", "016"],
                                             ["___", "___", "___", "___"], ["___", "___", "___", "___"], ["___", "___", "___", "___"]])

        self.connect_node("025", (1, 2, 0), [["001", "002", "003", "004"], ["005", "006", "007", "008"], ["009", "010", "011", "012"],
                                             ["017", "018", "019", "020"], ["021", "022", "023", "024"], ["013", "014", "015", "016"],
                                             ["___", "___", "___", "___"], ["025", "___", "___", "___"], ["___", "___", "___", "___"]])

        self.connect_node("026", (1, 2, 0), [["001", "002", "003", "004"], ["005", "006", "007", "008"], ["009", "010", "011", "012"],
                                             ["017", "018", "019", "020"], ["021", "022", "023", "024"], ["013", "014", "015", "016"],
                                             ["___", "___", "___", "___"], ["025", "026", "___", "___"], ["___", "___", "___", "___"]])

        self.connect_node("027", (1, 2, 0), [["001", "002", "003", "004"], ["005", "006", "007", "008"], ["009", "010", "011", "012"],
                                             ["017", "018", "019", "020"], ["021", "022", "023", "024"], ["013", "014", "015", "016"],
                                             ["___", "___", "___", "___"], ["025", "026", "027", "___"], ["___", "___", "___", "___"]])

        self.connect_node("028", (1, 2, 0), [["001", "002", "003", "004"], ["005", "006", "007", "008"], ["009", "010", "011", "012"],
                                             ["017", "018", "019", "020"], ["021", "022", "023", "024"], ["013", "014", "015", "016"],
                                             ["___", "___", "___", "___"], ["025", "026", "027", "028"], ["___", "___", "___", "___"]])

        self.connect_node("029", (2, 2, 0), [["001", "002", "003", "004"], ["005", "006", "007", "008"], ["009", "010", "011", "012"],
                                             ["017", "018", "019", "020"], ["021", "022", "023", "024"], ["013", "014", "015", "016"],
                                             ["___", "___", "___", "___"], ["025", "026", "027", "028"], ["029", "___", "___", "___"]])

        self.connect_node("030", (2, 2, 0), [["001", "002", "003", "004"], ["005", "006", "007", "008"], ["009", "010", "011", "012"],
                                             ["017", "018", "019", "020"], ["021", "022", "023", "024"], ["013", "014", "015", "016"],
                                             ["___", "___", "___", "___"], ["025", "026", "027", "028"], ["029", "030", "___", "___"]])

        self.connect_node("031", (2, 2, 0), [["001", "002", "003", "004"], ["005", "006", "007", "008"], ["009", "010", "011", "012"],
                                             ["017", "018", "019", "020"], ["021", "022", "023", "024"], ["013", "014", "015", "016"],
                                             ["___", "___", "___", "___"], ["025", "026", "027", "028"], ["029", "030", "031", "___"]])

        self.connect_node("032", (2, 2, 0), [["001", "002", "003", "004"], ["005", "006", "007", "008"], ["009", "010", "011", "012"],
                                             ["017", "018", "019", "020"], ["021", "022", "023", "024"], ["013", "014", "015", "016"],
                                             ["___", "___", "___", "___"], ["025", "026", "027", "028"], ["029", "030", "031", "032"]])

        self.connect_node("033", (0, 2, 0), [["001", "002", "003", "004"], ["005", "006", "007", "008"], ["009", "010", "011", "012"],
                                             ["017", "018", "019", "020"], ["021", "022", "023", "024"], ["013", "014", "015", "016"],
                                             ["033", "___", "___", "___"], ["025", "026", "027", "028"], ["029", "030", "031", "032"]])

        self.connect_node("034", (0, 2, 0), [["001", "002", "003", "004"], ["005", "006", "007", "008"], ["009", "010", "011", "012"],
                                             ["017", "018", "019", "020"], ["021", "022", "023", "024"], ["013", "014", "015", "016"],
                                             ["033", "034", "___", "___"], ["025", "026", "027", "028"], ["029", "030", "031", "032"]])

        self.connect_node("035", (0, 2, 0), [["001", "002", "003", "004"], ["005", "006", "007", "008"], ["009", "010", "011", "012"],
                                             ["017", "018", "019", "020"], ["021", "022", "023", "024"], ["013", "014", "015", "016"],
                                             ["033", "034", "035", "___"], ["025", "026", "027", "028"], ["029", "030", "031", "032"]])

        self.connect_node("036", (0, 2, 0), [["001", "002", "003", "004"], ["005", "006", "007", "008"], ["009", "010", "011", "012"],
                                             ["017", "018", "019", "020"], ["021", "022", "023", "024"], ["013", "014", "015", "016"],
                                             ["033", "034", "035", "036"], ["025", "026", "027", "028"], ["029", "030", "031", "032"]])



        TODO: Disconnect 005-008


        self.test_network("036", (0, 2, 0), [["001", "002", "003", "004"], ["___", "___", "___", "___"], ["009", "010", "011", "012"],
                                             ["017", "018", "019", "020"], ["021", "022", "023", "024"], ["013", "014", "015", "016"],
                                             ["033", "034", "035", "036"], ["025", "026", "027", "028"], ["029", "030", "031", "032"]])


        self.connect_node("037", (1, 0, 0), [["001", "002", "003", "004"], ["037", "___", "___", "___"], ["009", "010", "011", "012"],
                                             ["017", "018", "019", "020"], ["021", "022", "023", "024"], ["013", "014", "015", "016"],
                                             ["033", "034", "035", "036"], ["025", "026", "027", "028"], ["029", "030", "031", "032"]])

        self.connect_node("038", (1, 0, 0), [["001", "002", "003", "004"], ["037", "038", "___", "___"], ["009", "010", "011", "012"],
                                             ["017", "018", "019", "020"], ["021", "022", "023", "024"], ["013", "014", "015", "016"],
                                             ["033", "034", "035", "036"], ["025", "026", "027", "028"], ["029", "030", "031", "032"]])

        self.connect_node("039", (1, 0, 0), [["001", "002", "003", "004"], ["037", "038", "039", "___"], ["009", "010", "011", "012"],
                                             ["017", "018", "019", "020"], ["021", "022", "023", "024"], ["013", "014", "015", "016"],
                                             ["033", "034", "035", "036"], ["025", "026", "027", "028"], ["029", "030", "031", "032"]])

        self.connect_node("40", (1, 0, 0),  [["001", "002", "003", "004"], ["037", "038", "039", "040"], ["009", "010", "011", "012"],
                                             ["017", "018", "019", "020"], ["021", "022", "023", "024"], ["013", "014", "015", "016"],
                                             ["033", "034", "035", "036"], ["025", "026", "027", "028"], ["029", "030", "031", "032"]])

        # Disconnect all sockets
        for app in self._apps.values():
            app.network_view.disconnect()

        for app in self._apps.values():
            self.assertEqual(
                    app.network_view.counter.connect + app.network_view.counter.accept,
                    app.network_view.counter.disconnect + app.network_view.counter.close
                )


        #
        # DEBUG
        #
        keys = Connections.all.keys()
        keys.sort()

        log.info("=== Slot id =======================")
        for key in keys:
            network_view = Connections.all[key]
            app = self._apps[key]
            log.info("slot_id: %s %s" % (network_view._bind_url, app.block_position.id()))

        log.info("=== Network Counters ======================")
        counter_total = NetworkCounter()
        for key in keys:
            network_view = Connections.all[key]
            log.info("Counters: %s %s" % (network_view._bind_url, network_view.counter))
            counter_total += network_view.counter
        log.info("TOTAL           %s" % (counter_total))


        self.assertEqual(counter_total.receive, counter_total.send)
        self.assertEqual(
                counter_total.connect + counter_total.accept,
                counter_total.disconnect + counter_total.close
            )

        log.info("=== Timers ======================")
        log.info(log_counter.result())

